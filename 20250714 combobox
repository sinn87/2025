
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Windows.Forms

' 自定义控件：圆角 ComboBox（只实现圆角 + Flat，无其它功能）
Public Class RoundedComboBox
    Inherits UserControl

    ' 内部实际使用的 ComboBox 控件
    Private WithEvents innerComboBox As New ComboBox()

    Public Sub New()
        ' 开启双缓冲，减少闪烁
        Me.DoubleBuffered = True

        ' 设置控件的背景色为白色
        Me.BackColor = Color.White

        ' 设置控件的大小（可自定义）
        Me.Size = New Size(150, 30)

        ' 设置 ComboBox 的基本属性
        With innerComboBox
            .FlatStyle = FlatStyle.Flat ' 设置为 Flat 样式
            .DropDownStyle = ComboBoxStyle.DropDownList ' 设置为下拉选择模式
            .BackColor = Color.White ' 背景白色
            .ForeColor = Color.Black ' 字体颜色
            .Margin = New Padding(0) ' 移除边距
            .IntegralHeight = False ' 禁止自动高度（避免下拉项超出边界）
            .Dock = DockStyle.Fill ' 填满整个 UserControl
        End With

        ' 将 ComboBox 添加到 UserControl
        Me.Controls.Add(innerComboBox)

        ' 设置内边距（让边框和内容之间有点空间）
        Me.Padding = New Padding(2)
    End Sub

    ' 公开 Items 属性，允许外部添加选项
    Public ReadOnly Property Items() As ComboBox.ObjectCollection
        Get
            Return innerComboBox.Items
        End Get
    End Property

    ' 公开 SelectedIndex 属性
    Public Property SelectedIndex As Integer
        Get
            Return innerComboBox.SelectedIndex
        End Get
        Set(value As Integer)
            innerComboBox.SelectedIndex = value
        End Set
    End Property

    ' 公开 SelectedItem 属性
    Public Property SelectedItem As Object
        Get
            Return innerComboBox.SelectedItem
        End Get
        Set(value As Object)
            innerComboBox.SelectedItem = value
        End Set
    End Property

    ' 重写 OnPaint，用来绘制圆角边框
    Protected Overrides Sub OnPaint(e As PaintEventArgs)
        MyBase.OnPaint(e)

        ' 启用抗锯齿，防止边框锯齿
        e.Graphics.SmoothingMode = SmoothingMode.AntiAlias

        ' 计算绘制区域（减去1像素以避免溢出）
        Dim rect As New Rectangle(0, 0, Me.Width - 1, Me.Height - 1)

        ' 定义圆角路径
        Using path As GraphicsPath = GetRoundedRectPath(rect, 8) ' 圆角半径 8
            ' 创建边框笔刷
            Using pen As New Pen(Color.Gray, 1)
                e.Graphics.DrawPath(pen, path) ' 绘制边框
            End Using
        End Using
    End Sub

    ' 辅助函数：创建一个圆角矩形路径
    Private Function GetRoundedRectPath(rect As Rectangle, radius As Integer) As GraphicsPath
        Dim path As New GraphicsPath()
        Dim d As Integer = radius * 2

        ' 添加 4 个角的圆弧 + 中间的直线
        path.AddArc(rect.X, rect.Y, d, d, 180, 90)
        path.AddLine(rect.X + radius, rect.Y, rect.Right - radius, rect.Y)
        path.AddArc(rect.Right - d, rect.Y, d, d, 270, 90)
        path.AddLine(rect.Right, rect.Y + radius, rect.Right, rect.Bottom - radius)
        path.AddArc(rect.Right - d, rect.Bottom - d, d, d, 0, 90)
        path.AddLine(rect.Right - radius, rect.Bottom, rect.X + radius, rect.Bottom)
        path.AddArc(rect.X, rect.Bottom - d, d, d, 90, 90)
        path.AddLine(rect.X, rect.Bottom - radius, rect.X, rect.Y + radius)

        path.CloseFigure()
        Return path
    End Function
End Class










Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Windows.Forms

' 创建一个自定义 ComboBox 控件，继承自 ComboBox
Public Class RoundedComboBox
    Inherits ComboBox

    Public Sub New()
        ' 设置 ComboBox 样式为 Flat
        Me.FlatStyle = FlatStyle.Flat

        ' 设置背景色为白色（你可以根据需要修改）
        Me.BackColor = Color.White

        ' 设置为不可多行绘制（启用 OwnerDrawFixed 模式用于自定义绘图）
        Me.DrawMode = DrawMode.OwnerDrawFixed

        ' 设置固定项高度
        Me.ItemHeight = Me.Height - 6 ' 避免文字贴边
    End Sub

    ' 重写 OnPaintBackground 来绘制圆角背景和边框
    Protected Overrides Sub OnPaintBackground(pevent As PaintEventArgs)
        ' 不调用基类，不用默认绘制
        ' MyBase.OnPaintBackground(pevent)

        Dim g As Graphics = pevent.Graphics

        ' 启用抗锯齿，让圆角更平滑
        g.SmoothingMode = SmoothingMode.AntiAlias

        ' 定义圆角矩形范围
        Dim rect As New Rectangle(0, 0, Me.Width - 1, Me.Height - 1)

        ' 定义圆角路径
        Dim path As GraphicsPath = GetRoundedRectPath(rect, 8)

        ' 填充背景色
        Using brush As New SolidBrush(Me.BackColor)
            g.FillPath(brush, path)
        End Using

        ' 画边框
        Using pen As New Pen(Color.Gray)
            g.DrawPath(pen, path)
        End Using
    End Sub

    ' 重写 OnDrawItem 来绘制下拉项
    Protected Overrides Sub OnDrawItem(e As DrawItemEventArgs)
        If e.Index < 0 Then Return

        ' 绘制背景（选中项为高亮色，否则为白）
        Dim isSelected As Boolean = (e.State And DrawItemState.Selected) = DrawItemState.Selected
        Dim backColor As Color = If(isSelected, SystemColors.Highlight, Me.BackColor)
        Dim foreColor As Color = If(isSelected, SystemColors.HighlightText, Me.ForeColor)

        Using b As New SolidBrush(backColor)
            e.Graphics.FillRectangle(b, e.Bounds)
        End Using

        ' 绘制文字
        Using f As New SolidBrush(foreColor)
            e.Graphics.DrawString(Me.Items(e.Index).ToString(), Me.Font, f, e.Bounds.X, e.Bounds.Y)
        End Using
    End Sub

    ' 辅助函数：返回圆角路径
    Private Function GetRoundedRectPath(rect As Rectangle, radius As Integer) As GraphicsPath
        Dim path As New GraphicsPath()
        Dim d As Integer = radius * 2

        ' 左上角圆弧
        path.AddArc(rect.X, rect.Y, d, d, 180, 90)

        ' 顶部线
        path.AddLine(rect.X + radius, rect.Y, rect.Right - radius, rect.Y)

        ' 右上角圆弧
        path.AddArc(rect.Right - d, rect.Y, d, d, 270, 90)

        ' 右侧线
        path.AddLine(rect.Right, rect.Y + radius, rect.Right, rect.Bottom - radius)

        ' 右下角圆弧
        path.AddArc(rect.Right - d, rect.Bottom - d, d, d, 0, 90)

        ' 底部线
        path.AddLine(rect.Right - radius, rect.Bottom, rect.X + radius, rect.Bottom)

        ' 左下角圆弧
        path.AddArc(rect.X, rect.Bottom - d, d, d, 90, 90)

        ' 左侧线
        path.AddLine(rect.X, rect.Bottom - radius, rect.X, rect.Y + radius)

        path.CloseFigure()
        Return path
    End Function
End Class
