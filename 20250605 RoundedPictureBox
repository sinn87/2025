Imports System.ComponentModel
Imports System.Drawing.Drawing2D

<ToolboxBitmap(GetType(PictureBox))>
Public Class RoundedPictureBox
    Inherits PictureBox

    Private _borderRadius As Integer = 20
    Private _borderColor As Color = Color.Gray
    Private _borderWidth As Integer = 2

    <Category("外观")>
    Public Property BorderRadius As Integer
        Get
            Return _borderRadius
        End Get
        Set(value As Integer)
            _borderRadius = value
            Me.Invalidate()
        End Set
    End Property

    <Category("外观")>
    Public Property BorderColor As Color
        Get
            Return _borderColor
        End Get
        Set(value As Color)
            _borderColor = value
            Me.Invalidate()
        End Set
    End Property

    <Category("外观")>
    Public Property BorderWidth As Integer
        Get
            Return _borderWidth
        End Get
        Set(value As Integer)
            _borderWidth = value
            Me.Invalidate()
        End Set
    End Property

    Public Sub New()
        Me.SizeMode = PictureBoxSizeMode.StretchImage
        Me.BackColor = Color.Transparent
        Me.SetStyle(ControlStyles.UserPaint Or ControlStyles.ResizeRedraw Or
                    ControlStyles.OptimizedDoubleBuffer Or ControlStyles.SupportsTransparentBackColor, True)
    End Sub

    Protected Overrides Sub OnPaint(pe As PaintEventArgs)
        pe.Graphics.SmoothingMode = SmoothingMode.AntiAlias

        Dim rect = Me.ClientRectangle
        Dim path = GetRoundedPath(rect, BorderRadius)

        ' 剪裁为圆角区域
        Me.Region = New Region(path)

        ' 绘制图片
        If Me.Image IsNot Nothing Then
            Using imgBrush As New TextureBrush(Me.Image, Me.ImageLayout)
                pe.Graphics.FillPath(imgBrush, path)
            End Using
        Else
            pe.Graphics.FillPath(New SolidBrush(Me.BackColor), path)
        End If

        ' 绘制边框
        If BorderWidth > 0 Then
            Using pen As New Pen(BorderColor, BorderWidth)
                pe.Graphics.DrawPath(pen, path)
            End Using
        End If
    End Sub

    Private Function GetRoundedPath(rect As Rectangle, radius As Integer) As GraphicsPath
        Dim path As New GraphicsPath()
        Dim d = radius * 2

        If radius <= 0 Then
            path.AddRectangle(rect)
        Else
            path.AddArc(rect.X, rect.Y, d, d, 180, 90)
            path.AddArc(rect.Right - d, rect.Y, d, d, 270, 90)
            path.AddArc(rect.Right - d, rect.Bottom - d, d, d, 0, 90)
            path.AddArc(rect.X, rect.Bottom - d, d, d, 90, 90)
            path.CloseFigure()
        End If

        Return path
    End Function
End Class
