Imports System.Drawing.Drawing2D
Imports System.Windows.Forms
Imports System.ComponentModel

' 自定义带圆角边框的 TextBox 控件
Public Class RoundTextBox
    Inherits UserControl

    ' 内部标准 TextBox
    Private WithEvents innerTextBox As New TextBox()

    ' 圆角半径（可写死也可以做成属性）
    Private _cornerRadius As Integer = 8

    ' 构造函数
    Public Sub New()
        ' 设置默认尺寸
        Me.Size = New Size(150, 30)

        ' 设置内部 TextBox 外观
        innerTextBox.BorderStyle = BorderStyle.None
        innerTextBox.BackColor = Me.BackColor
        innerTextBox.ForeColor = Me.ForeColor
        innerTextBox.Font = Me.Font
        innerTextBox.Multiline = False ' 默认为单行

        ' 添加 TextBox 到当前控件
        Me.Controls.Add(innerTextBox)

        ' 响应控件尺寸变化，自动调整 TextBox 尺寸
        AddHandler Me.Resize, AddressOf RoundTextBox_Resize
        RoundTextBox_Resize(Me, EventArgs.Empty)

        ' 启用双缓冲等样式优化绘图
        Me.SetStyle(ControlStyles.AllPaintingInWmPaint Or
                    ControlStyles.OptimizedDoubleBuffer Or
                    ControlStyles.ResizeRedraw Or
                    ControlStyles.UserPaint, True)
        Me.UpdateStyles()
    End Sub

    ' 控件大小变化时，重新设置内部 TextBox 的尺寸与位置
    Private Sub RoundTextBox_Resize(sender As Object, e As EventArgs)
        innerTextBox.Width = Me.Width - 16
        innerTextBox.Height = Me.Height - 14
        innerTextBox.Location = New Point(8, (Me.Height - innerTextBox.Height) \ 2)
    End Sub

    ' 绘制圆角边框
    Protected Overrides Sub OnPaint(e As PaintEventArgs)
        MyBase.OnPaint(e)

        e.Graphics.SmoothingMode = SmoothingMode.AntiAlias

        ' 定义圆角路径
        Dim rect As New Rectangle(0, 0, Me.Width - 1, Me.Height - 1)
        Dim path As GraphicsPath = GetRoundPath(rect, _cornerRadius)

        ' 填充背景
        Using b As New SolidBrush(Me.BackColor)
            e.Graphics.FillPath(b, path)
        End Using

        ' 画边框
        Using pen As New Pen(Color.Gray, 1)
            e.Graphics.DrawPath(pen, path)
        End Using
    End Sub

    ' 构造圆角路径
    Private Function GetRoundPath(rect As Rectangle, radius As Integer) As GraphicsPath
        Dim path As New GraphicsPath()
        path.AddArc(rect.X, rect.Y, radius, radius, 180, 90)
        path.AddLine(rect.X + radius, rect.Y, rect.Right - radius, rect.Y)
        path.AddArc(rect.Right - radius, rect.Y, radius, radius, 270, 90)
        path.AddLine(rect.Right, rect.Y + radius, rect.Right, rect.Bottom - radius)
        path.AddArc(rect.Right - radius, rect.Bottom - radius, radius, radius, 0, 90)
        path.AddLine(rect.Right - radius, rect.Bottom, rect.X + radius, rect.Bottom)
        path.AddArc(rect.X, rect.Bottom - radius, radius, radius, 90, 90)
        path.AddLine(rect.X, rect.Bottom - radius, rect.X, rect.Y + radius)
        path.CloseFigure()
        Return path
    End Function

    ' ✅ 暴露 Text 属性供外部访问（覆盖 UserControl 的 Text 属性）
    <Category("外观"), Description("输入框的文字内容")>
    Public Overrides Property Text As String
        Get
            Return innerTextBox.Text
        End Get
        Set(value As String)
            innerTextBox.Text = value
        End Set
    End Property

    ' ✅ 将 TextChanged 事件向外传播
    Public Shadows Event TextChanged As EventHandler

    ' 当 innerTextBox 内容改变时，触发外部 TextChanged 事件
    Private Sub innerTextBox_TextChanged(sender As Object, e As EventArgs) Handles innerTextBox.TextChanged
        RaiseEvent TextChanged(Me, e)
    End Sub
End Class



Public Sub New()
    ' ...前面已有的设置...
    AddHandler Me.Resize, AddressOf RoundTextBox_Resize
    RoundTextBox_Resize(Me, EventArgs.Empty) ' 初始化时调用一次
    SetRoundRegion() ' ✅ 添加此行
End Sub

Private Sub RoundTextBox_Resize(sender As Object, e As EventArgs)
    innerTextBox.Width = Me.Width - 16
    innerTextBox.Height = Me.Height - 14
    innerTextBox.Location = New Point(8, (Me.Height - innerTextBox.Height) \ 2)

    SetRoundRegion() ' ✅ 控件大小变更时重新设置 Region
End Sub


Private Sub SetRoundRegion()
    Dim rect As New Rectangle(0, 0, Me.Width, Me.Height)
    Dim path As GraphicsPath = GetRoundPath(rect, _cornerRadius)
    Me.Region = New Region(path)
End Sub
