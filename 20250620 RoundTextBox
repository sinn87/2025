Imports System.Drawing.Drawing2D
Imports System.Windows.Forms

' 创建一个自定义圆角TextBox控件
Public Class RoundTextBox
    Inherits UserControl  ' 使用UserControl方便组合标准TextBox和绘制边框

    ' 内部使用的标准TextBox
    Private innerTextBox As New TextBox()

    ' 圆角半径
    Private _cornerRadius As Integer = 8

    ' 控件构造函数
    Public Sub New()
        ' 设置控件大小
        Me.Size = New Size(150, 30)

        ' 设置内部TextBox样式
        innerTextBox.BorderStyle = BorderStyle.None
        innerTextBox.Location = New Point(8, 7) ' 位置略微偏移以居中
        innerTextBox.Width = Me.Width - 16
        innerTextBox.Anchor = AnchorStyles.Left Or AnchorStyles.Right Or AnchorStyles.Top
        innerTextBox.BackColor = Me.BackColor
        innerTextBox.ForeColor = Me.ForeColor
        innerTextBox.Font = Me.Font

        ' 将TextBox添加到自定义控件中
        Me.Controls.Add(innerTextBox)

        ' 设置控件样式（启用双缓冲，防止闪烁）
        Me.SetStyle(ControlStyles.AllPaintingInWmPaint Or
                    ControlStyles.OptimizedDoubleBuffer Or
                    ControlStyles.ResizeRedraw Or
                    ControlStyles.UserPaint, True)
        Me.UpdateStyles()
    End Sub

    ' 重写OnPaint方法，自定义绘制圆角边框
    Protected Overrides Sub OnPaint(e As PaintEventArgs)
        MyBase.OnPaint(e)

        ' 设置抗锯齿绘图模式
        e.Graphics.SmoothingMode = SmoothingMode.AntiAlias

        ' 定义圆角矩形区域
        Dim rect As New Rectangle(0, 0, Me.Width - 1, Me.Height - 1)
        Dim path As GraphicsPath = GetRoundPath(rect, _cornerRadius)

        ' 填充背景（和控件背景保持一致）
        Using backgroundBrush As New SolidBrush(Me.BackColor)
            e.Graphics.FillPath(backgroundBrush, path)
        End Using

        ' 绘制边框（灰色）
        Using borderPen As New Pen(Color.Gray, 1)
            e.Graphics.DrawPath(borderPen, path)
        End Using
    End Sub

    ' 创建一个带圆角的路径
    Private Function GetRoundPath(rect As Rectangle, radius As Integer) As GraphicsPath
        Dim path As New GraphicsPath()
        path.AddArc(rect.X, rect.Y, radius, radius, 180, 90)
        path.AddLine(rect.X + radius, rect.Y, rect.Right - radius, rect.Y)
        path.AddArc(rect.Right - radius, rect.Y, radius, radius, 270, 90)
        path.AddLine(rect.Right, rect.Y + radius, rect.Right, rect.Bottom - radius)
        path.AddArc(rect.Right - radius, rect.Bottom - radius, radius, radius, 0, 90)
        path.AddLine(rect.Right - radius, rect.Bottom, rect.X + radius, rect.Bottom)
        path.AddArc(rect.X, rect.Bottom - radius, radius, radius, 90, 90)
        path.AddLine(rect.X, rect.Bottom - radius, rect.X, rect.Y + radius)
        path.CloseFigure()
        Return path
    End Function

    ' 将Text属性映射到内部TextBox
    Public Overrides Property Text As String
        Get
            Return innerTextBox.Text
        End Get
        Set(value As String)
            innerTextBox.Text = value
        End Set
    End Property
End Class
